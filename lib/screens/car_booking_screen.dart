import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:provider/provider.dart';
import '../models/car.dart';
import '../models/booking.dart' as booking_model;
import '../widgets/enhanced_booking_calendar.dart';
import '../services/booking_service.dart';
import '../services/availability_service.dart';
import '../services/auth_service.dart';
import '../widgets/floating_header.dart';
import '../utils/price_formatter.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import '../services/notification_service.dart';

class CarBookingScreen extends StatefulWidget {
  final Car car;

  const CarBookingScreen({
    super.key,
    required this.car,
  });

  @override
  State<CarBookingScreen> createState() => _CarBookingScreenState();
}

class _CarBookingScreenState extends State<CarBookingScreen> {
  DateTime? _startDate;
  DateTime? _endDate;
  double _totalPrice = 0.0;
  bool _isLoading = false;
  
  final _notesController = TextEditingController();
  final _formKey = GlobalKey<FormState>();

  @override
  void dispose() {
    _notesController.dispose();
    super.dispose();
  }

  double get _dailyRate {
    // Extract daily rate from car price
    String priceText = widget.car.price
        .replaceAll('UKÂ£', '')
        .replaceAll(' total', '')
        .replaceAll(',', '');
    return double.tryParse(priceText) ?? 100.0;
  }

  List<DateTime> _getUnavailableDates() {
    // Mock unavailable dates - in real app, this would come from API
    final now = DateTime.now();
    return [
      now.add(const Duration(days: 5)),
      now.add(const Duration(days: 6)),
      now.add(const Duration(days: 12)),
      now.add(const Duration(days: 20)),
      now.add(const Duration(days: 21)),
    ];
  }

  Map<DateTime, double> _getSpecialPricing() {
    // Mock special pricing - in real app, this would come from API
    final now = DateTime.now();
    final baseRate = _dailyRate;
    
    return {
      // Weekend pricing (20% higher)
      now.add(const Duration(days: 2)): baseRate * 1.2,
      now.add(const Duration(days: 3)): baseRate * 1.2,
      now.add(const Duration(days: 9)): baseRate * 1.2,
      now.add(const Duration(days: 10)): baseRate * 1.2,
      
      // Holiday pricing (50% higher)
      now.add(const Duration(days: 15)): baseRate * 1.5,
      now.add(const Duration(days: 16)): baseRate * 1.5,
      
      // Discounted pricing (10% lower)
      now.add(const Duration(days: 25)): baseRate * 0.9,
      now.add(const Duration(days: 26)): baseRate * 0.9,
      now.add(const Duration(days: 27)): baseRate * 0.9,
    };
  }

  void _onDatesSelected(DateTime? startDate, DateTime? endDate, double totalPrice) {
    setState(() {
      _startDate = startDate;
      _endDate = endDate;
      _totalPrice = totalPrice;
    });
  }

  Future<void> _createBooking() async {
    if (!_formKey.currentState!.validate()) return;
    if (_startDate == null || _endDate == null) {
      _showErrorMessage('Please select rental dates');
      return;
    }

    setState(() => _isLoading = true);

    try {
      final authService = Provider.of<AuthService>(context, listen: false);
      final user = authService.currentUser;
      
      if (user == null) {
        _showErrorMessage('You must be logged in to make a booking');
        return;
      }

      final bookingService = BookingService();
      
      final booking = booking_model.Booking(
        id: '', // Will be generated by the service
        carId: widget.car.id,
        userId: user.id,
        hostId: widget.car.hostId,
        startDate: _startDate!,
        endDate: _endDate!,
        totalPrice: _totalPrice,
        status: 'pending',
        notes: _notesController.text.trim().isEmpty ? null : _notesController.text.trim(),
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );

      // Use AvailabilityService for now until BookingService has createBooking method
      final availabilityService = AvailabilityService();
      final success = await availabilityService.addBooking(booking);
      
      if (success) {
        // Send notification to the user
        final uid = Supabase.instance.client.auth.currentUser?.id ?? user.id;
        await NotificationService().sendNotification(
          userId: uid,
          title: 'Booking Submitted',
          message: 'Your booking request for ${widget.car.name} was submitted.',
          type: 'booking',
          metadata: {
            'car_id': widget.car.id,
            'start': _startDate!.toIso8601String(),
            'end': _endDate!.toIso8601String(),
          },
        );
        _showSuccessDialog();
      } else {
        _showErrorMessage('Failed to create booking. Please try again.');
      }
    } catch (e) {
      _showErrorMessage('An error occurred: ${e.toString()}');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  void _showErrorMessage(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red[400],
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _showSuccessDialog() {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return AlertDialog(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16),
          ),
          title: Row(
            children: [
              Container(
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: Colors.green.withValues(alpha: 0.1),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: const Icon(
                  Icons.check_circle,
                  color: Colors.green,
                  size: 24,
                ),
              ),
              const SizedBox(width: 12),
              Text(
                'Booking Submitted!',
                style: GoogleFonts.inter(
                  fontSize: 18,
                  fontWeight: FontWeight.w600,
                ),
              ),
            ],
          ),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'Your booking request has been submitted successfully. The host will review your request and respond within 24 hours.',
                style: GoogleFonts.inter(fontSize: 16),
              ),
              const SizedBox(height: 16),
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.grey[50],
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.grey[200]!),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Booking Details',
                      style: GoogleFonts.inter(
                        fontWeight: FontWeight.w600,
                        fontSize: 14,
                      ),
                    ),
                    const SizedBox(height: 8),
                    _buildDetailRow('Car', widget.car.name),
                    _buildDetailRow('Dates', '${_formatDate(_startDate!)} - ${_formatDate(_endDate!)}'),
                    _buildDetailRow('Total', PriceFormatter.formatWithSettings(context, _totalPrice.toStringAsFixed(0))),
                  ],
                ),
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop(); // Close dialog
                Navigator.of(context).pop(); // Go back to previous screen
              },
              child: Text(
                'View My Bookings',
                style: GoogleFonts.inter(
                  fontWeight: FontWeight.w600,
                  color: const Color(0xFF353935),
                ),
              ),
            ),
            ElevatedButton(
              onPressed: () {
                Navigator.of(context).pop(); // Close dialog
                Navigator.of(context).pop(); // Go back to previous screen
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: const Color(0xFF353935),
                foregroundColor: Colors.white,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
              ),
              child: Text(
                'OK',
                style: GoogleFonts.inter(
                  fontWeight: FontWeight.w600,
                ),
              ),
            ),
          ],
        );
      },
    );
  }

  Widget _buildDetailRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 4),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(
            '$label:',
            style: GoogleFonts.inter(
              fontSize: 13,
              color: Colors.grey[600],
            ),
          ),
          Text(
            value,
            style: GoogleFonts.inter(
              fontSize: 13,
              fontWeight: FontWeight.w500,
            ),
          ),
        ],
      ),
    );
  }

  String _formatDate(DateTime date) {
    return '${date.day}/${date.month}/${date.year}';
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey[50],
      body: SafeArea(
        child: Column(
          children: [
            // Header
            FloatingHeader(
              child: Row(
                children: [
                  IconButton(
                    onPressed: () => Navigator.pop(context),
                    icon: const Icon(
                      Icons.arrow_back,
                      color: Colors.white,
                    ),
                  ),
                  const SizedBox(width: 8),
                  Text(
                    'Book Car',
                    style: GoogleFonts.inter(
                      fontSize: 18,
                      fontWeight: FontWeight.w600,
                      color: Colors.white,
                    ),
                  ),
                ],
              ),
            ),
            
            // Content
            Expanded(
              child: SingleChildScrollView(
                padding: const EdgeInsets.all(16),
                child: Form(
                  key: _formKey,
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // Car Information Card
                      _buildCarInfoCard(),
                      
                      const SizedBox(height: 24),
                      
                      // Enhanced Booking Calendar
                      EnhancedBookingCalendar(
                        initialStartDate: _startDate,
                        initialEndDate: _endDate,
                        dailyRate: _dailyRate,
                        onDatesSelected: _onDatesSelected,
                        unavailableDates: _getUnavailableDates(),
                        specialPricing: _getSpecialPricing(),
                      ),
                      
                      const SizedBox(height: 24),
                      
                      // Additional Notes
                      _buildNotesSection(),
                      
                      const SizedBox(height: 24),
                      
                      // Terms and Conditions
                      _buildTermsSection(),
                      
                      const SizedBox(height: 24),
                      
                      // Book Now Button
                      _buildBookButton(),
                      
                      const SizedBox(height: 24),
                    ],
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildCarInfoCard() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withValues(alpha: 0.08),
            blurRadius: 20,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: Row(
        children: [
          // Car Image
          ClipRRect(
            borderRadius: BorderRadius.circular(12),
            child: (widget.car.image.startsWith('http') || widget.car.image.startsWith('https'))
                ? Image.network(
                    widget.car.image,
                    width: 80,
                    height: 60,
                    fit: BoxFit.cover,
                    errorBuilder: (context, error, stackTrace) {
                      return Container(
                        width: 80,
                        height: 60,
                        decoration: BoxDecoration(
                          color: Colors.grey[200],
                          borderRadius: BorderRadius.circular(12),
                        ),
                        child: const Icon(
                          Icons.directions_car,
                          color: Colors.grey,
                          size: 32,
                        ),
                      );
                    },
                  )
                : Image.asset(
                    widget.car.image,
                    width: 80,
                    height: 60,
                    fit: BoxFit.cover,
                    errorBuilder: (context, error, stackTrace) {
                      return Container(
                        width: 80,
                        height: 60,
                        decoration: BoxDecoration(
                          color: Colors.grey[200],
                          borderRadius: BorderRadius.circular(12),
                        ),
                        child: const Icon(
                          Icons.directions_car,
                          color: Colors.grey,
                          size: 32,
                        ),
                      );
                    },
                  ),
          ),
          
          const SizedBox(width: 16),
          
          // Car Details
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  widget.car.name,
                  style: GoogleFonts.inter(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                    color: Colors.black,
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  widget.car.location,
                  style: GoogleFonts.inter(
                    fontSize: 14,
                    color: Colors.grey[600],
                  ),
                ),
                const SizedBox(height: 8),
                Row(
                  children: [
                    Icon(
                      Icons.star,
                      size: 16,
                      color: Colors.amber[600],
                    ),
                    const SizedBox(width: 4),
                    Text(
                      '${widget.car.rating} (${widget.car.trips} trips)',
                      style: GoogleFonts.inter(
                        fontSize: 14,
                        color: Colors.grey[600],
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
          
          // Daily Rate
          Column(
            crossAxisAlignment: CrossAxisAlignment.end,
            children: [
              Text(
                PriceFormatter.formatWithSettings(context, _dailyRate.toStringAsFixed(0)),
                style: GoogleFonts.inter(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: const Color(0xFF353935),
                ),
              ),
              Text(
                'per day',
                style: GoogleFonts.inter(
                  fontSize: 12,
                  color: Colors.grey[600],
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildNotesSection() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withValues(alpha: 0.08),
            blurRadius: 20,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              const Icon(Icons.note_add, color: Color(0xFF353935), size: 24),
              const SizedBox(width: 8),
              Text(
                'Additional Notes',
                style: GoogleFonts.inter(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: Colors.black,
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          TextFormField(
            controller: _notesController,
            maxLines: 3,
            decoration: InputDecoration(
              hintText: 'Any special requests or notes for the host...',
              hintStyle: GoogleFonts.inter(color: Colors.grey[500]),
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(12),
                borderSide: BorderSide(color: Colors.grey[300]!),
              ),
              enabledBorder: OutlineInputBorder(
                borderRadius: BorderRadius.circular(12),
                borderSide: BorderSide(color: Colors.grey[300]!),
              ),
              focusedBorder: OutlineInputBorder(
                borderRadius: BorderRadius.circular(12),
                borderSide: const BorderSide(color: Color(0xFF353935)),
              ),
            ),
            style: GoogleFonts.inter(),
          ),
        ],
      ),
    );
  }

  Widget _buildTermsSection() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withValues(alpha: 0.08),
            blurRadius: 20,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              const Icon(Icons.info_outline, color: Color(0xFF353935), size: 24),
              const SizedBox(width: 8),
              Text(
                'Important Information',
                style: GoogleFonts.inter(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: Colors.black,
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          _buildInfoItem(
            icon: Icons.schedule,
            title: 'Response Time',
            description: 'Host typically responds within 24 hours',
          ),
          const SizedBox(height: 12),
          _buildInfoItem(
            icon: Icons.payment,
            title: 'Payment',
            description: 'No payment required until booking is confirmed',
          ),
          const SizedBox(height: 12),
          _buildInfoItem(
            icon: Icons.cancel,
            title: 'Cancellation',
            description: 'Free cancellation up to 24 hours before pickup',
          ),
        ],
      ),
    );
  }

  Widget _buildInfoItem({
    required IconData icon,
    required String title,
    required String description,
  }) {
    return Row(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Container(
          padding: const EdgeInsets.all(8),
          decoration: BoxDecoration(
            color: const Color(0xFF353935).withValues(alpha: 0.1),
            borderRadius: BorderRadius.circular(8),
          ),
          child: Icon(
            icon,
            color: const Color(0xFF353935),
            size: 16,
          ),
        ),
        const SizedBox(width: 12),
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                title,
                style: GoogleFonts.inter(
                  fontSize: 14,
                  fontWeight: FontWeight.w600,
                  color: Colors.black,
                ),
              ),
              const SizedBox(height: 4),
              Text(
                description,
                style: GoogleFonts.inter(
                  fontSize: 13,
                  color: Colors.grey[600],
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildBookButton() {
    return SizedBox(
      width: double.infinity,
      height: 56,
      child: ElevatedButton(
        onPressed: (_startDate != null && _endDate != null && !_isLoading)
            ? _createBooking
            : null,
        style: ElevatedButton.styleFrom(
          backgroundColor: const Color(0xFF353935),
          foregroundColor: Colors.white,
          disabledBackgroundColor: Colors.grey[300],
          disabledForegroundColor: Colors.grey[500],
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16),
          ),
          elevation: 0,
        ),
        child: _isLoading
            ? const SizedBox(
                width: 20,
                height: 20,
                child: CircularProgressIndicator(
                  strokeWidth: 2,
                  valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                ),
              )
            : Text(
                _startDate != null && _endDate != null
                    ? 'Request Booking - ${PriceFormatter.formatWithSettings(context, _totalPrice.toStringAsFixed(0))}'
                    : 'Select Dates to Continue',
                style: GoogleFonts.inter(
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                ),
              ),
      ),
    );
  }
}